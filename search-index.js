var searchIndex = new Map(JSON.parse('[\
["som_core",{"doc":"This crate contains common types that are useful to be …","t":"CCPPPFPFPFPFPPGPGPFPGFGPPPPPPFPOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOGPPJJPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNN","n":["ast","bytecode","Array","Assignment","BigInteger","BinaryOp","BinaryOp","Block","Block","Body","Body","ClassDef","Double","Exit","Expression","Integer","Literal","Literal","Message","Message","MethodBody","MethodDef","MethodKind","Operator","Positional","Primitive","Reference","String","Symbol","Term","Unary","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exprs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","full_stopped","instance_locals","instance_methods","into","into","into","into","into","into","into","into","into","into","into","kind","lhs","locals","name","op","parameters","receiver","rhs","signature","signature","static_locals","static_methods","super_class","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","body","locals","parameters","rhs","Bytecode","Dup","Halt","NAMES","PADDED_NAMES","Pop","PopArgument","PopField","PopLocal","Push0","Push1","PushArgument","PushBlock","PushConstant","PushConstant0","PushConstant1","PushConstant2","PushField","PushGlobal","PushLocal","PushNil","ReturnLocal","ReturnNonLocal","Send1","Send2","Send3","SendN","SuperSend1","SuperSend2","SuperSend3","SuperSendN","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","hash","into","name","padded_name","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"som_core"],[2,"som_core::ast"],[184,"som_core::ast::MethodBody"],[186,"som_core::ast::MethodKind"],[188,"som_core::bytecode"],[236,"core::fmt"],[237,"core::fmt"],[238,"core::any"],[239,"core::hash"],[240,"alloc::string"]],"d":["The SOM Abstract Syntax Tree definitions.","The SOM bytecode definitions.","Represents an array literal (eg. <code>$(1 2 3)</code>)","An assignment to a binding (eg. <code>counter := 10</code>).","Represents a big integer (bigger than a 64-bit signed …","Represents a binary operation.","A binary operation (eg. <code>counter &lt;= 5</code>).","Represents a block.","A block (eg. <code>[ :value | counter incrementBy: value ]</code>).","Represents the contents of a body (within a term or block).","An actual body for the method, with locals.","Represents a class definition.","Represents a decimal number literal (eg. <code>3.14</code>).","An exit operation (eg. <code>^counter</code>).","Represents an expression.","Represents a integer number literal (eg. <code>42</code>).","Represents a literal.","A literal (eg. <code>&#39;foo&#39;</code>, <code>10</code>, <code>#foo</code>, …).","Represents a message send.","A message send (eg. <code>counter incrementBy: 5</code>).","Represents a method’s body.","Represents a method definition.","Represents a method’s kind.","A binary operator method definiton.","A positional method definition (keyword-based).","A primitive (meant to be implemented by the VM itself).","A reference to a binding (eg. <code>counter</code>).","Represents a string literal (eg. <code>&#39;hello&#39;</code>).","Represents a symbol literal (eg. <code>#foo</code>).","Represents a term.","A unary method definition.","The method’s body.","Represents the block’s body.","The body of the term.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The expressions in the body.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Is the last expression terminated with a period ?","The locals for instances of that class.","The methods declared for instances of that class.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The method’s kind.","Represents the left-hand side.","The names of the locals.","The name of the class.","Represents the operator symbol.","Represents the parameters’ names.","The object to which the message is sent to.","Represents the right-hand side.","The method’s signature (eg. <code>println</code>, <code>at:put:</code> or <code>==</code>).","The signature of the message (eg. “ifTrue:ifFalse:”).","The static locals for that class.","The static methods declared for that class.","The name of the superclass.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The list of dynamic values that are passed.","","","The binding names for the method’s parameters.","The binding name for the right-hand side.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Get the instruction’s name.","Get the instruction’s name padded so that every padded …","","","","",""],"i":[0,0,11,6,11,0,6,0,6,0,4,0,11,6,0,11,0,6,0,6,0,0,0,2,2,4,6,11,11,0,2,3,9,10,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,5,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,5,1,1,1,2,3,4,5,6,7,8,9,10,11,3,8,9,1,8,9,7,8,3,7,1,1,1,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,7,22,22,23,24,0,18,18,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18],"f":"``````````````````````````````````{ce{}{}}000000000000000000000{bb}{dd}{ff}{hh}{jj}{ll}{nn}{A`A`}{AbAb}{AdAd}{AfAf}{{ce}Ah{}{}}0000000000{{bb}Aj}{{dd}Aj}{{ff}Aj}{{hh}Aj}{{jj}Aj}{{ll}Aj}{{nn}Aj}{{A`A`}Aj}{{AbAb}Aj}{{AdAd}Aj}{{AfAf}Aj}`{{bAl}An}{{dAl}An}{{fAl}An}{{hAl}An}{{jAl}An}{{lAl}An}{{nAl}An}{{A`Al}An}{{AbAl}An}{{AdAl}An}{{AfAl}An}{cc{}}0000000000```{ce{}{}}0000000000`````````````00000000000{c{{B`{e}}}{}{}}000000000000000000000{cBb{}}0000000000````````````````````````````````````22{BdBd}{{ce}Ah{}{}}{{BdBd}Aj}{{BdAl}An}07{{Bdc}AhBf}7{BdBh}08{cBj{}}887","c":[],"p":[[5,"ClassDef",2],[6,"MethodKind",2],[5,"MethodDef",2],[6,"MethodBody",2],[5,"Body",2],[6,"Expression",2],[5,"Message",2],[5,"BinaryOp",2],[5,"Block",2],[5,"Term",2],[6,"Literal",2],[1,"unit"],[1,"bool"],[5,"Formatter",236],[8,"Result",236],[6,"Result",237],[5,"TypeId",238],[6,"Bytecode",188],[10,"Hasher",239],[1,"str"],[5,"String",240],[15,"Body",184],[15,"Positional",186],[15,"Operator",186]],"b":[[224,"impl-Debug-for-Bytecode"],[225,"impl-Display-for-Bytecode"]]}],\
["som_interpreter_ast",{"doc":"This is the interpreter for the Simple Object Machine.","t":"IICCCQCCCCCCCCCFONNNNNNONNNNNNNNNNFGPPNNNNNNONNNNNNNNNNNNOONNONONNNNONNNNNNNNNNKMPFGPNONNNNNNNNNNNNNNNNNONNNNNNNNNNNOOOOFNNNNONNNNNNNONNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNPKPPPGNNNNNMNNNNPFGPPNNNNNNNNNNNNNONNNNNNONONNNNNNNNNNICCCCCCHHCCCCCCJJHHJJHHJJHHJJHHJJHHJJHHJJHHJJHHJJHHJJHHJJHHJJHHFFNONNNONONONOONNNNOOONNNNONNONONNONNNONONNNNNNNNNONONOONOONONONONONNNNNNNNNNNPPPPPPPPPPPPPGNNNNNNNNNNNNNNNNNNN","n":["SOMRef","SOMWeakRef","block","class","evaluate","expect_args","frame","hashcode","instance","interner","invokable","method","primitives","universe","value","Block","block","borrow","borrow_mut","class","clone","clone_into","fmt","frame","from","hash","into","invoke","nb_parameters","to_owned","try_from","try_into","type_id","vzip","Class","MaybeWeak","Strong","Weak","assign_local","borrow","borrow","borrow_mut","borrow_mut","class","class","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from_class_def","hash","into","into","is_static","locals","lookup_local","lookup_method","methods","name","name","set_class","set_class_owned","set_super_class","super_class","super_class","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Evaluate","evaluate","Block","Frame","FrameKind","Method","assign_local","bindings","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","from_kind","get_method_holder","get_method_signature","get_self","into","into","kind","kind","lookup_local","method_frame","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","block","holder","self_value","signature","Instance","assign_local","borrow","borrow_mut","class","class","clone","clone_into","fmt","from","from_class","hash","into","locals","lookup_local","super_class","to_owned","try_from","try_into","type_id","vzip","Interned","Interner","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","equivalent","fmt","fmt","from","from","hash","intern","into","into","lookup","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_capacity","Exception","Invoke","Local","NonLocal","Restart","Return","borrow","borrow_mut","fmt","from","into","invoke","try_from","try_into","type_id","vzip","Defined","Method","MethodKind","NotImplemented","Primitive","borrow","borrow","borrow_mut","borrow_mut","class","clone","clone","clone_into","clone_into","from","from","hash","holder","holder","into","into","invoke","is_primitive","is_primitive","kind","kind","signature","signature","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PrimitiveFn","array","block1","block2","block3","class","double","get_class_primitives","get_instance_primitives","integer","method","object","string","symbol","system","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CoreClasses","Universe","array_class","array_class","assign_global","assign_local","block1_class","block1_class","block2_class","block2_class","block3_class","block3_class","block_class","block_class","boolean_class","borrow","borrow","borrow_mut","borrow_mut","class_class","classpath","core","current_frame","current_method_frame","does_not_understand","double_class","double_class","escaped_block","false_class","false_class","fmt","frames","from","from","globals","has_global","initialize","integer_class","integer_class","intern_symbol","interner","into","into","load_class","load_class_from_path","load_system_class","lookup_global","lookup_local","lookup_symbol","metaclass_class","metaclass_class","method_class","method_class","nil_class","nil_class","object_class","primitive_class","primitive_class","start_time","string_class","string_class","symbol_class","symbol_class","system_class","system_class","true_class","true_class","try_from","try_from","try_into","try_into","type_id","type_id","unknown_global","vzip","vzip","with_classpath","with_frame","Array","BigInteger","Block","Boolean","Class","Double","Instance","Integer","Invokable","Nil","String","Symbol","System","Value","assign_local","borrow","borrow_mut","class","clone","clone_into","eq","fmt","from","hash","into","lookup_local","lookup_method","to_owned","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"som_interpreter_ast"],[15,"som_interpreter_ast::block"],[34,"som_interpreter_ast::class"],[79,"som_interpreter_ast::evaluate"],[81,"som_interpreter_ast::frame"],[116,"som_interpreter_ast::frame::FrameKind"],[120,"som_interpreter_ast::instance"],[141,"som_interpreter_ast::interner"],[171,"som_interpreter_ast::invokable"],[187,"som_interpreter_ast::method"],[225,"som_interpreter_ast::primitives"],[240,"som_interpreter_ast::primitives::array"],[244,"som_interpreter_ast::primitives::block1"],[248,"som_interpreter_ast::primitives::block2"],[252,"som_interpreter_ast::primitives::block3"],[256,"som_interpreter_ast::primitives::class"],[260,"som_interpreter_ast::primitives::double"],[264,"som_interpreter_ast::primitives::integer"],[268,"som_interpreter_ast::primitives::method"],[272,"som_interpreter_ast::primitives::object"],[276,"som_interpreter_ast::primitives::string"],[280,"som_interpreter_ast::primitives::symbol"],[284,"som_interpreter_ast::primitives::system"],[288,"som_interpreter_ast::universe"],[366,"som_interpreter_ast::value"],[399,"core::fmt"],[400,"core::fmt"],[401,"alloc::vec"],[402,"core::result"],[403,"core::any"],[404,"core::option"],[405,"core::convert"],[406,"core::clone"],[407,"core::fmt"],[408,"alloc::string"],[409,"alloc::rc"],[410,"anyhow"],[411,"core::convert"],[412,"std::path"]],"d":["A strong and owning reference to an object.","A weak reference to an object.","Facilities for manipulating blocks.","Facilities for manipulating classes.","Facilities for evaluating nodes and expressions.","Macro for checking and destructuring arguments passed to …","Facilities for manipulating stack frames.","Facilities for manipulating values.","Facilities for manipulating class instances.","Facilities for string interning.","Facilities for invoking methods and/or primitives.","Facilities for manipulating class methods.","Definitions for all supported primitives.","The interpreter’s main data structure.","Facilities for manipulating values.","Represents an executable block.","Block definition from the AST.","","","Get the block’s class.","","","","Reference to the captured stack frame.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Retrieve the number of parameters this block accepts.","","","","","","Represents a loaded class.","A reference that may be either weak or owned/strong.","An owned reference.","A weak reference.","Assign a value to a local binding.","","","","","Get the class of this class.","The class of this class.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Load up a class from its class definition from the AST.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this class a static one ?","The class’ locals.","Search for a local binding.","Search for a given method within this class.","The class’ methods/invokables.","Get the class’ name.","The class’ name.","Set the class of this class (as a weak reference).","Set the class of this class (as a strong reference).","Set the superclass of this class (as a weak reference).","Get the superclass of this class.","The superclass of this class.","","","","","","","","","","","The trait for evaluating AST nodes.","Evaluate the node within a given universe.","A frame created from a block evaluation.","Represents a stack frame.","The kind of a given frame.","A frame created from a method invocation.","Assign to a local binding.","The bindings within this frame.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new empty frame from its kind.","Get the holder for this current method.","Get the signature of the current method.","Get the self value for this frame.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the frame’s kind.","This frame’s kind.","Search for a local binding.","Get the method invocation frame for that frame.","","","","","","","","","","The block instance for the current frame.","The holder of the current method (used for lexical …","The self value.","The current method.","Represents a generic (non-primitive) class instance.","Assign a value to a local binding.","","","Get the class of which this is an instance from.","The class of which this is an instance from.","","","","Returns the argument unchanged.","Construct an instance for a given class.","","Calls <code>U::from(self)</code>.","This instance’s locals.","Search for a local binding.","Get the superclass of this instance’s class.","","","","","","An interned string.","A string interner.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Intern a given string.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the string associated to a given interning ID.","","","","","","","","","","Initialize the interner with an initial capacity.","An exception, expected to bubble all the way up.","The trait for invoking methods and primitives.","A local return, the value is for the immediate caller.","A non-local return, the value is for the parent of the …","A request to restart execution from the top of the closest …","Represents the kinds of possible returns from an …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Invoke within the given universe and with the given …","","","","","A user-defined method from the AST.","Represents a class method.","The kind of a class method.","A non-implemented primitive.","An interpreter primitive.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether this invocable is a primitive.","Whether this invocable is a primitive.","","","","","","","","","","","","","","","A interpreter primitive (just a bare function pointer).","Primitives for the <strong>Array</strong> class.","Primitives for the <strong>Block</strong> and <strong>Block1</strong> class.","Primitives for the <strong>Block2</strong> class.","Primitives for the <strong>Block3</strong> class.","Primitives for the <strong>Class</strong> class.","Primitives for the <strong>Double</strong> class.","","","Primitives for the <strong>Integer</strong> class.","Primitives for the <strong>Method</strong> class and the <strong>Primitive</strong> class.","Primitives for the <strong>Object</strong> class.","Primitives for the <strong>String</strong> class.","Primitives for the <strong>Symbol</strong> class.","Primitives for the <strong>System</strong> class.","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","The core classes of the SOM interpreter.","The central data structure for the interpreter.","Get the <strong>Array</strong> class.","The <strong>Array</strong> class.","Assign a value to a global binding.","Assign a value to a local binding.","Get the <strong>Block1</strong> class.","The <strong>Block1</strong> class.","Get the <strong>Block2</strong> class.","The <strong>Block2</strong> class.","Get the <strong>Block3</strong> class.","The <strong>Block3</strong> class.","Get the <strong>Block</strong> class.","The <strong>Block</strong> class.","The <strong>Boolean</strong> class.","","","","","The <strong>Class</strong> class.","The path to search in for new classes.","The interpreter’s core classes.","Get the current frame.","Get the method invocation frame for the current frame.","Call <code>doesNotUnderstand:</code> on the given value, if it is …","Get the <strong>Double</strong> class.","The <strong>Double</strong> class.","Call <code>escapedBlock:</code> on the given value, if it is defined.","Get the <strong>False</strong> class.","The <strong>False</strong> class.","","The interpreter’s stack frames.","Returns the argument unchanged.","Returns the argument unchanged.","The known global bindings.","Returns whether a global binding of the specified name …","Call <code>System&gt;&gt;#initialize:</code> with the given name, if it is …","Get the <strong>Integer</strong> class.","The <strong>Integer</strong> class.","Intern a symbol.","The string interner for symbols.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Load a class from its name into this universe.","Load a class from its path into this universe.","Load a system class (with an incomplete hierarchy).","Search for a global binding.","Search for a local binding.","Lookup a symbol.","Get the <strong>Metaclass</strong> class.","The <strong>Class</strong> class.","Get the <strong>Method</strong> class.","The <strong>Method</strong> class.","Get the <strong>Nil</strong> class.","The <strong>Nil</strong> class.","The <strong>Object</strong> class.","Get the <strong>Primitive</strong> class.","The <strong>Primitive</strong> class.","The time record of the universe’s creation.","Get the <strong>String</strong> class.","The <strong>String</strong> class.","Get the <strong>Symbol</strong> class.","The <strong>Symbol</strong> class.","Get the <strong>System</strong> class.","The <strong>System</strong> class.","Get the <strong>True</strong> class.","The <strong>True</strong> class.","","","","","","","Call <code>unknownGlobal:</code> on the given value, if it is defined.","","","Initialize the universe from the given classpath.","Execute a piece of code within a new stack frame.","An array of values.","A big integer value (arbitrarily big).","A block value, ready to be evaluated.","A boolean value (<strong>true</strong> or <strong>false</strong>).","A bare class object.","An floating-point value.","A generic (non-primitive) class instance.","An integer value.","A bare invokable.","The <strong>nil</strong> value.","A string value.","An interned symbol value.","The <strong>system</strong> value.","Represents an SOM value.","Assign a value to a local binding within this value.","","","Get the class of the current value.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Search for a local binding within this value.","Search for a given method for this value.","","Get the string representation of this value.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,18,18,3,18,3,18,3,3,3,18,3,18,3,18,3,18,3,3,3,18,3,3,3,3,3,3,3,3,3,3,3,3,3,18,3,18,3,18,3,18,3,18,3,0,25,27,0,0,27,26,26,27,26,27,26,27,27,27,26,27,26,26,26,26,26,27,26,26,26,26,26,27,27,26,27,26,27,26,27,26,45,46,46,46,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,28,31,28,31,28,28,28,28,28,28,31,28,31,28,31,28,31,31,28,28,31,28,31,28,31,28,31,31,11,0,11,11,11,0,11,11,11,11,11,32,11,11,11,11,33,0,0,33,33,33,23,33,23,23,33,23,33,23,33,23,23,23,23,33,23,23,33,23,23,23,23,23,33,23,33,23,33,23,33,23,33,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,38,2,2,2,38,2,38,2,38,2,38,38,2,38,2,38,38,2,2,2,2,2,2,38,2,2,38,38,2,2,38,2,2,2,2,38,2,2,2,38,2,2,2,2,2,2,2,38,2,38,2,38,38,2,38,2,2,38,2,38,2,38,2,38,2,38,2,38,2,38,2,2,38,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],"f":"`````````````````{ce{}{}}0{{bd}{{h{f}}}}{bb}{{ce}j{}{}}{{bl}n}`{cc{}}{{bc}jA`}6{{bd{Ad{Ab}}}Af}{bAh}8{c{{Aj{e}}}{}{}}0{cAl{}}:````{{fcAb}{{An{j}}}{{Bb{B`}}}};;;;{f{{h{f}}}}`{{{Bd{c}}}{{Bd{c}}}Bf}{ff};;{{{Bd{c}}l}nBh}{{fl}n};;{Bj{{Aj{{h{f}}Bl}}}}{{fc}jA`}{ce{}{}}0``{{fc}{{An{Ab}}}{{Bb{B`}}}}{{fc}{{An{{C`{Bn}}}}}{{Bb{B`}}}}`{fB`}`{{f{h{f}}}j}00{f{{An{{h{f}}}}}}`55????>>55`{{Cbd}Af}````{{CdcAb}{{An{j}}}{{Bb{B`}}}}`7777{CfCf}{{ce}j{}{}}{{Cfl}n}{{Cdl}n}{cc{}}0{CfCd}{Cd{{h{f}}}}{CdCh}{CdAb}{ce{}{}}0{CdCf}`{{Cdc}{{An{Ab}}}{{Bb{B`}}}}{{{h{Cd}}}{{h{Cd}}}}3{c{{Aj{e}}}{}{}}000{cAl{}}055`````{{CjcAb}{{An{j}}}{{Bb{B`}}}}66{Cj{{h{f}}}}`{CjCj}{{ce}j{}{}}{{Cjl}n}?{{{h{f}}}Cj}{{Cjc}jA`}<`{{Cjc}{{An{Ab}}}{{Bb{B`}}}}{Cj{{An{{h{f}}}}}}>::9>``>>>>{ChCh}6{{ChCh}Cl}{{ce}Cl{}{}}0{{Chl}n}{{Cnl}n}{cc{}}0{{Chc}jA`}{{CnB`}Ch}{ce{}{}}0{{CnCh}B`}1{c{{Aj{e}}}{}{}}000{cAl{}}033{AhCn}``````44{{Afl}n}85{{D`d{Ad{Ab}}}Af}4436`````6666{{Bnd}{{h{f}}}}{DbDb}{BnBn}{{ce}j{}{}}0=={{Bnc}jA`}{Bn{{Dd{f}}}}`<<{{Bnd{Ad{Ab}}}Af}{DbCl}{BnCl}{BnDb}`{BnB`}`{ce{}{}}0{c{{Aj{e}}}{}{}}000{cAl{}}022```````{B`{{An{{Dj{{Dh{B`DfCl}}}}}}}}0````````{B`{{An{Df}}}}0``00``00``00``00``00``00``00``00``00``00``00``{d{{h{f}}}}`{{dcAb}{{An{j}}}{{Bb{B`}}}}01`1`1`1``6666```{d{{h{Cd}}}}0{{dAbc{Ad{Ab}}}{{An{Af}}}{{Bb{B`}}}}3`{{dAb{C`{b}}}{{An{Af}}}}4`{{Dll}n}`{cc{}}0`{{dc}Cl{{Bb{B`}}}}{{d{Ad{Ab}}}{{An{Af}}}}8`{{dB`}Ch}`>>{{dc}{{Aj{{h{f}}Dn}}}{{E`{Bl}}}}{{dc}{{Aj{{h{f}}Dn}}}{{Bb{Eb}}}}{{{Dj{c}}e}{{Aj{{h{f}}Dn}}}{{Bb{Eb}}}{{E`{Bl}}}}{{dc}{{An{Ab}}}{{Bb{B`}}}}0{{dCh}B`}>`>`>``>``>`>`>`>`{c{{Aj{e}}}{}{}}000{cAl{}}0{{dAbc}{{An{Af}}}{{Bb{B`}}}}{ce{}{}}0{{{Ad{Ed}}}{{Aj{dDn}}}}{{dCfe}c{}{{Eh{d}{{Ef{c}}}}}}``````````````{{AbcAb}{{An{j}}}{{Bb{B`}}}}33{{Abd}{{h{f}}}}{AbAb}{{ce}j{}{}}{{AbAb}Cl}{{Abl}n}{cc{}}{{Abc}jA`}:{{Abc}{{An{Ab}}}{{Bb{B`}}}}{{Abdc}{{An{{C`{Bn}}}}}{{Bb{B`}}}}<{{Abd}Bl}{c{{Aj{e}}}{}{}}0{cAl{}}?","c":[],"p":[[5,"Block",15],[5,"Universe",288],[5,"Class",34],[8,"SOMRef",0],[1,"unit"],[5,"Formatter",399],[8,"Result",399],[10,"Hasher",400],[6,"Value",366],[5,"Vec",401],[6,"Return",171],[1,"usize"],[6,"Result",402],[5,"TypeId",403],[6,"Option",404],[1,"str"],[10,"AsRef",405],[6,"MaybeWeak",34],[10,"Clone",406],[10,"Debug",399],[5,"ClassDef",407],[5,"String",408],[5,"Method",187],[5,"Rc",409],[10,"Evaluate",79],[5,"Frame",81],[6,"FrameKind",81],[5,"Interned",141],[5,"Instance",120],[1,"bool"],[5,"Interner",141],[10,"Invoke",171],[6,"MethodKind",187],[8,"SOMWeakRef",0],[8,"PrimitiveFn",225],[1,"tuple"],[1,"slice"],[5,"CoreClasses",288],[5,"Error",410],[10,"Into",405],[5,"Path",411],[5,"PathBuf",411],[17,"Output"],[10,"FnOnce",412],[15,"Block",116],[15,"Method",116]],"b":[]}],\
["som_interpreter_bc",{"doc":"This is the interpreter for the Simple Object Machine.","t":"IICCCCQCCCCCCCQCCFFOONNNNNNNNNNONNNONNOONONNNNNNNNNNFGPPNNNNNNONNNNNNNNNNNOONNONONNNNONNNNNNNNNNPPPPPGPPNNNNHNNNNNNNNNNNNHPFGPONNNNNONNNNNNNNNNNNNOONNNNNNNNNNNNNOOOOFNNNNONNNNNNNONNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNONNNNNNOONNNNPFFGPPONNNNNNNNNNNNNNNNNNNOONNNNNNNOOONONNNNNNNNNNNNNNNNICCCCCCHHCCCCCCJJHHJJHHJJHHJJHHJJHHJJHHJJHHJJHHJJHHJJHHJJHHJJHHFFNONNONONONOONNNNOOONNONNONNNONNNONONNNNNNNNONONONONONONONONONNNNNNNNNNPPPPPPPPPPPPPGNNNNNNNNNNNNNNNNNNN","n":["SOMRef","SOMWeakRef","block","class","compiler","disassembler","expect_args","frame","hashcode","instance","interner","interpreter","method","primitives","reverse","universe","value","Block","BlockInfo","blk_info","body","borrow","borrow","borrow_mut","borrow_mut","class","clone","clone","clone_into","clone_into","fmt","frame","from","from","hash","inline_cache","into","into","literals","locals","nb_parameters","nb_params","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Class","MaybeWeak","Strong","Weak","assign_local","borrow","borrow","borrow_mut","borrow_mut","class","class","clone","clone","clone_into","clone_into","fmt","fmt","from","from","hash","into","into","is_static","locals","lookup_local","lookup_method","methods","name","name","set_class","set_class_owned","set_super_class","super_class","super_class","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Array","BigInteger","Block","Double","Integer","Literal","String","Symbol","borrow","borrow_mut","clone","clone_into","compile_class","eq","equivalent","equivalent","fmt","from","hash","into","to_owned","try_from","try_into","type_id","vzip","disassemble_method_body","Block","Frame","FrameKind","Method","args","assign_local","borrow","borrow","borrow_mut","borrow_mut","bytecode_idx","clone","clone_into","from","from","from_kind","get_bytecode","get_current_bytecode","get_method","get_method_holder","get_self","into","into","kind","kind","locals","lookup_argument","lookup_constant","lookup_local","method_frame","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","block","holder","method","self_value","Instance","assign_local","borrow","borrow_mut","class","class","clone","clone_into","fmt","from","from_class","hash","into","locals","lookup_local","super_class","to_owned","try_from","try_into","type_id","vzip","Interned","Interner","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","equivalent","fmt","fmt","from","from","hash","intern","into","into","lookup","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_capacity","Interpreter","borrow","borrow_mut","current_frame","frames","from","into","new","pop_frame","push_frame","run","stack","start_time","try_from","try_into","type_id","vzip","Defined","Method","MethodEnv","MethodKind","NotImplemented","Primitive","body","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","class","clone","clone","clone","clone_into","clone_into","clone_into","fmt","from","from","from","hash","holder","holder","inline_cache","into","into","into","invoke","is_primitive","is_primitive","kind","kind","literals","locals","signature","signature","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","PrimitiveFn","array","block1","block2","block3","class","double","get_class_primitives","get_instance_primitives","integer","method","object","string","symbol","system","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CLASS_PRIMITIVES","INSTANCE_PRIMITIVES","get_class_primitive","get_instance_primitive","CoreClasses","Universe","array_class","array_class","assign_global","block1_class","block1_class","block2_class","block2_class","block3_class","block3_class","block_class","block_class","boolean_class","borrow","borrow","borrow_mut","borrow_mut","class_class","classpath","core","does_not_understand","double_class","double_class","escaped_block","false_class","false_class","fmt","from","from","globals","has_global","initialize","integer_class","integer_class","intern_symbol","interner","into","into","load_class","load_class_from_path","load_system_class","lookup_global","lookup_symbol","metaclass_class","metaclass_class","method_class","method_class","nil_class","nil_class","object_class","object_class","primitive_class","primitive_class","string_class","string_class","symbol_class","symbol_class","system_class","system_class","true_class","true_class","try_from","try_from","try_into","try_into","type_id","type_id","unknown_global","vzip","vzip","with_classpath","Array","BigInteger","Block","Boolean","Class","Double","Instance","Integer","Invokable","Nil","String","Symbol","System","Value","assign_local","borrow","borrow_mut","class","clone","clone_into","eq","fmt","from","hash","into","lookup_local","lookup_method","to_owned","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"som_interpreter_bc"],[17,"som_interpreter_bc::block"],[52,"som_interpreter_bc::class"],[96,"som_interpreter_bc::compiler"],[121,"som_interpreter_bc::disassembler"],[122,"som_interpreter_bc::frame"],[161,"som_interpreter_bc::frame::FrameKind"],[165,"som_interpreter_bc::instance"],[186,"som_interpreter_bc::interner"],[216,"som_interpreter_bc::interpreter"],[233,"som_interpreter_bc::method"],[289,"som_interpreter_bc::primitives"],[304,"som_interpreter_bc::primitives::array"],[308,"som_interpreter_bc::primitives::block1"],[312,"som_interpreter_bc::primitives::block2"],[316,"som_interpreter_bc::primitives::block3"],[320,"som_interpreter_bc::primitives::class"],[324,"som_interpreter_bc::primitives::double"],[328,"som_interpreter_bc::primitives::integer"],[332,"som_interpreter_bc::primitives::method"],[336,"som_interpreter_bc::primitives::object"],[340,"som_interpreter_bc::primitives::string"],[344,"som_interpreter_bc::primitives::symbol"],[348,"som_interpreter_bc::primitives::system"],[352,"som_interpreter_bc::universe"],[424,"som_interpreter_bc::value"],[457,"core::fmt"],[458,"core::fmt"],[459,"core::result"],[460,"core::any"],[461,"core::option"],[462,"core::clone"],[463,"core::fmt"],[464,"som_core::ast"],[465,"som_core::bytecode"],[466,"alloc::vec"],[467,"alloc::string"],[468,"anyhow"],[469,"core::convert"],[470,"std::path"],[471,"core::convert"]],"d":["A strong and owning reference to an object.","A weak reference to an object.","Facilities for manipulating blocks.","Facilities for manipulating classes.","Facilities for compiling code into bytecode.","Facilities for disassembling bytecode.","Macro for checking and destructuring arguments passed to …","Facilities for manipulating stack frames.","Facilities for manipulating values.","Facilities for manipulating class instances.","Facilities for string interning.","The interpreter’s main data structure.","Facilities for manipulating class methods.","Definitions for all supported primitives.","","The collection of all known SOM objects during execution.","Facilities for manipulating values.","Represents an executable block.","","","","","","","","Get the block’s class.","","","","","","Reference to the captured stack frame.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Retrieve the number of parameters this block accepts.","","","","","","","","","","","","Represents a loaded class.","A reference that may be either weak or owned/strong.","An owned reference.","A weak reference.","Assign a value to a local binding.","","","","","Get the class of this class.","The class of this class.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this class a static one ?","The class’ locals.","Search for a local binding.","Search for a given method within this class.","The class’ methods/invokables.","Get the class’ name.","The class’ name.","Set the class of this class (as a weak reference).","Set the class of this class (as a strong reference).","Set the superclass of this class (as a weak reference).","Get the superclass of this class.","The superclass of this class.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","A frame created from a block evaluation.","Represents a stack frame.","The kind of a given frame.","A frame created from a method invocation.","The arguments within this frame.","Assign to a local binding.","","","","","Bytecode index.","","","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new empty frame from its kind.","Get the bytecode at the specified index for the current …","Get the current bytecode for the current method.","Get the current method itself.","Get the holder for this current method.","Get the self value for this frame.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the frame’s kind.","This frame’s kind.","The bindings within this frame.","","","Search for a local binding.","Get the method invocation frame for that frame.","","","","","","","","","","The block instance for the current frame.","The holder of the current method (used for lexical …","The current method.","The self value.","Represents a generic (non-primitive) class instance.","Assign a value to a local binding.","","","Get the class of which this is an instance from.","The class of which this is an instance from.","","","","Returns the argument unchanged.","Construct an instance for a given class.","","Calls <code>U::from(self)</code>.","This instance’s locals.","Search for a local binding.","Get the superclass of this instance’s class.","","","","","","An interned string.","A string interner.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Intern a given string.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the string associated to a given interning ID.","","","","","","","","","","Initialize the interner with an initial capacity.","","","","","The interpreter’s stack frames.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The evaluation stack.","The time record of the interpreter’s creation.","","","","","A user-defined method from the AST.","Represents a class method.","","The kind of a class method.","A non-implemented primitive.","An interpreter primitive.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether this invocable is a primitive.","Whether this invocable is a primitive.","","","","","","","","","","","","","","","","","","","","","","","A interpreter primitive (just a bare function pointer).","Primitives for the <strong>Array</strong> class.","Primitives for the <strong>Block</strong> and <strong>Block1</strong> class.","Primitives for the <strong>Block2</strong> class.","Primitives for the <strong>Block3</strong> class.","Primitives for the <strong>Class</strong> class.","Primitives for the <strong>Double</strong> class.","","","Primitives for the <strong>Integer</strong> class.","Primitives for the <strong>Method</strong> class and the <strong>Primitive</strong> class.","Primitives for the <strong>Object</strong> class.","Primitives for the <strong>String</strong> class.","Primitives for the <strong>Symbol</strong> class.","Primitives for the <strong>System</strong> class.","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","","","Search for a class primitive matching the given signature.","Search for an instance primitive matching the given …","The core classes of the SOM interpreter.","The central data structure for the interpreter.","Get the <strong>Array</strong> class.","The <strong>Array</strong> class.","Assign a value to a global binding.","Get the <strong>Block1</strong> class.","The <strong>Block1</strong> class.","Get the <strong>Block2</strong> class.","The <strong>Block2</strong> class.","Get the <strong>Block3</strong> class.","The <strong>Block3</strong> class.","Get the <strong>Block</strong> class.","The <strong>Block</strong> class.","The <strong>Boolean</strong> class.","","","","","The <strong>Class</strong> class.","The path to search in for new classes.","The interpreter’s core classes.","Call <code>doesNotUnderstand:</code> on the given value, if it is …","Get the <strong>Double</strong> class.","The <strong>Double</strong> class.","Call <code>escapedBlock:</code> on the given value, if it is defined.","Get the <strong>False</strong> class.","The <strong>False</strong> class.","","Returns the argument unchanged.","Returns the argument unchanged.","The known global bindings.","","Call <code>System&gt;&gt;#initialize:</code> with the given name, if it is …","Get the <strong>Integer</strong> class.","The <strong>Integer</strong> class.","Intern a symbol.","The string interner for symbols.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Load a class from its name into this universe.","Load a class from its path into this universe.","Load a system class (with an incomplete hierarchy).","Search for a global binding.","Lookup a symbol.","Get the <strong>Metaclass</strong> class.","The <strong>Class</strong> class.","Get the <strong>Method</strong> class.","The <strong>Method</strong> class.","Get the <strong>Nil</strong> class.","The <strong>Nil</strong> class.","Get the <strong>Object</strong> class.","The <strong>Object</strong> class.","Get the <strong>Primitive</strong> class.","The <strong>Primitive</strong> class.","Get the <strong>String</strong> class.","The <strong>String</strong> class.","Get the <strong>Symbol</strong> class.","The <strong>Symbol</strong> class.","Get the <strong>System</strong> class.","The <strong>System</strong> class.","Get the <strong>True</strong> class.","The <strong>True</strong> class.","","","","","","","Call <code>unknownGlobal:</code> on the given value, if it is defined.","","","Initialize the universe from the given classpath.","An array of values.","A big integer value (arbitrarily big).","A block value, ready to be evaluated.","A boolean value (<strong>true</strong> or <strong>false</strong>).","A bare class object.","An floating-point value.","A generic (non-primitive) class instance.","An integer value.","A bare invokable.","The <strong>nil</strong> value.","A string value.","An interned symbol value.","The <strong>system</strong> value.","Represents an SOM value.","Assign a value to a local binding within this value.","","","Get the class of the current value.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Search for a local binding within this value.","Search for a given method for this value.","","Get the string representation of this value.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,5,1,5,1,1,5,1,5,1,1,1,5,1,1,5,5,1,5,5,1,5,5,1,5,1,5,1,5,1,5,1,0,0,15,15,3,15,3,15,3,3,3,15,3,15,3,15,3,15,3,3,15,3,3,3,3,3,3,3,3,3,3,3,3,3,15,3,15,3,15,3,15,3,15,3,22,22,22,22,22,0,22,22,22,22,22,22,0,22,22,22,22,22,22,22,22,22,22,22,22,0,28,0,0,28,27,27,27,28,27,28,27,28,28,27,28,27,27,27,27,27,27,27,28,27,27,27,27,27,27,27,28,27,28,27,28,27,28,27,28,45,46,46,46,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,18,23,18,23,18,18,18,18,18,18,23,18,23,18,23,18,23,23,18,18,23,18,23,18,23,18,23,23,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,0,0,0,32,32,26,26,32,19,26,32,19,19,26,32,19,26,32,19,19,26,32,19,19,19,19,26,26,32,19,19,32,19,19,19,26,26,19,19,26,32,19,19,26,32,19,26,32,19,26,32,19,26,32,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,39,2,2,39,2,39,2,39,2,39,39,2,39,2,39,39,2,2,2,2,39,2,2,39,39,2,39,2,2,2,2,39,2,2,2,39,2,2,2,2,2,2,39,2,39,2,39,2,39,2,39,2,39,2,39,2,39,2,39,2,39,2,39,2,39,2,2,39,2,13,13,13,13,13,13,13,13,13,13,13,13,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":"`````````````````````{ce{}{}}000{{bd}{{h{f}}}}{jj}{bb}{{ce}l{}{}}0{{bn}A`}`{cc{}}0{{bc}lAb}`77``{bAd}`88{c{{Af{e}}}{}{}}000{cAh{}}0::````{{fAdAj}{{Al{l}}}};;;;{f{{h{f}}}}`{{{An{c}}}{{An{c}}}B`}{ff}::{{{An{c}}n}A`Bb}{{fn}A`}::{{fc}lAb}{ce{}{}}0``{{fAd}{{Al{Aj}}}}{{fBd}{{Al{{Bh{Bf}}}}}}`{fBj}`{{f{h{f}}}l}00{f{{Al{{h{f}}}}}}`55>>>>==55````````55{BlBl}{{ce}l{}{}}{{BnC`{Al{{h{f}}}}}{{Al{{h{f}}}}}}{{BlBl}Cb}{{ce}Cb{}{}}0{{Bln}A`}{cc{}}{{Blc}lAb}=={c{{Af{e}}}{}{}}0{cAh{}}?{{dfCd}l}`````{{CfAdAj}{{Al{l}}}}{ce{}{}}000`{ChCh}<77{ChCf}{{CfAd}{{Al{Cj}}}}{Cf{{Al{Cj}}}}{Cf{{Bh{Bf}}}}{Cf{{h{f}}}}{CfAj}77{CfCh}``{{CfAd}{{Al{Aj}}}}{{CfAd}{{Al{Bl}}}}1{{{h{Cf}}}{{h{Cf}}}};????>>;;`````{{ClAdAj}{{Al{l}}}}<<{Cl{{h{f}}}}`{ClCl}{{ce}l{}{}}{{Cln}A`}{cc{}}{{{h{f}}}Cl}{{Clc}lAb}{ce{}{}}`{{ClAd}{{Al{Aj}}}}{Cl{{Al{{h{f}}}}}}2{c{{Af{e}}}{}{}}0{cAh{}}4``4444{BdBd}:{{BdBd}Cb}{{ce}Cb{}{}}0{{Bdn}A`}{{Bnn}A`}<<{{Bdc}lAb}{{BnBj}Bd};;{{BnBd}Bj}<999988<<{AdBn}`=={Cn{{Al{{h{Cf}}}}}}`{cc{}}?{{}Cn}{Cnl}{{CnCh}{{h{Cf}}}}{{Cnd}{{Al{Aj}}}}``{c{{Af{e}}}{}{}}0{cAh{}}{ce{}{}}```````000000{{Bfd}{{h{f}}}}{CdCd}{D`D`}{BfBf}{{ce}l{}{}}00{{Bfn}A`}==={{Bfc}lAb}{Bf{{Db{f}}}}``888{{{Bh{Bf}}CndAj{Dd{Aj}}}l}{D`Cb}{BfCb}{BfD`}```{BfBj}`==={cDf{}}{c{{Af{e}}}{}{}}00000{cAh{}}00{ce{}{}}00```````{Bj{{Al{{Dl{{Dj{BjDhCb}}}}}}}}0````````{Bj{{Al{Dh}}}}0``00``00``00``00``00``00``00``00``00``00``00``{d{{h{f}}}}`{{dBdAj}{{Al{l}}}}1`1`1`1``4444```{{dCnAjBd{Dd{Aj}}}{{Al{l}}}}2`{{dCnAj{Bh{b}}}{{Al{l}}}}3`{{Dnn}A`}{cc{}}0`{{dBd}Cb}{{dCn{Dd{Aj}}}{{Al{l}}}}7`{{dBj}Bd}`;;{{dc}{{Af{{h{f}}E`}}}{{Eb{Df}}}}{{dc}{{Af{{h{f}}E`}}}{{Ef{Ed}}}}{{Bn{Dl{c}}e}{{Af{{h{f}}E`}}}{{Ef{Ed}}}{{Eb{Df}}}}{{dBd}{{Al{Aj}}}}{{dBd}Bj}=`=`=`=`=`=`=`=`=`{c{{Af{e}}}{}{}}000{cAh{}}0{{dCnAjBd}{{Al{l}}}}{ce{}{}}0{{{Dd{Eh}}}{{Af{dE`}}}}``````````````{{AjAdAj}{{Al{l}}}}22{{Ajd}{{h{f}}}}{AjAj}{{ce}l{}{}}{{AjAj}Cb}{{Ajn}A`}{cc{}}{{Ajc}lAb}9{{AjAd}{{Al{Aj}}}}{{AjdBd}{{Al{{Bh{Bf}}}}}};{{Ajd}Df}??><","c":[],"p":[[5,"Block",17],[5,"Universe",352],[5,"Class",52],[8,"SOMRef",0],[5,"BlockInfo",17],[1,"unit"],[5,"Formatter",457],[8,"Result",457],[10,"Hasher",458],[1,"usize"],[6,"Result",459],[5,"TypeId",460],[6,"Value",424],[6,"Option",461],[6,"MaybeWeak",52],[10,"Clone",462],[10,"Debug",457],[5,"Interned",186],[5,"Method",233],[5,"Rc",463],[1,"str"],[6,"Literal",96],[5,"Interner",186],[5,"ClassDef",464],[1,"bool"],[5,"MethodEnv",233],[5,"Frame",122],[6,"FrameKind",122],[6,"Bytecode",465],[5,"Instance",165],[5,"Interpreter",216],[6,"MethodKind",233],[8,"SOMWeakRef",0],[5,"Vec",466],[5,"String",467],[8,"PrimitiveFn",289],[1,"tuple"],[1,"slice"],[5,"CoreClasses",352],[5,"Error",468],[10,"Into",469],[5,"Path",470],[10,"AsRef",469],[5,"PathBuf",470],[15,"Block",161],[15,"Method",161]],"b":[]}],\
["som_lexer",{"doc":"This crate serves as the lexical analyser for the Simple …","t":"PPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["And","Assign","At","Colon","Comma","Comment","Div","EndBlock","EndTerm","Equal","Exit","Identifier","Keyword","Less","Lexer","LitBigInteger","LitDouble","LitInteger","LitString","LitSymbol","Minus","Mod","More","NewArray","NewBlock","NewTerm","Not","OperatorSequence","Or","Per","Period","Plus","Pound","Primitive","Separator","Star","Token","Whitespace","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","into","into","into_iter","new","next","skip_comments","skip_whitespace","text","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"som_lexer"],[68,"core::fmt"],[69,"core::fmt"],[70,"core::option"],[71,"alloc::string"],[72,"core::result"],[73,"core::any"]],"d":["A ampersand, the binary ‘and’ operator (<code>&amp;</code>).","The assignment operator (<code>:=</code>).","An at-sign (<code>@</code>).","A colon (<code>:</code>).","A comma (<code>,</code>).","A comment (<code>&quot;what a beautiful and majestic piece of code&quot;</code>).","A forward slash, the division operator (<code>/</code>).","A closing square-bracket (<code>]</code>).","A closing parenthesis (<code>)</code>).","An equal sign, the equality operator (<code>=</code>).","A caret, the return operator (<code>^</code>).","An identifier (<code>foo</code>).","A keyword (<code>fromString:</code>).","A lesser-than sign, the lesser-than operator (<code>&gt;</code>).","The lexer for the Simple Object Machine.","A big integer literal (<code>1542252643255252434</code>).","A floating-point literal (<code>10.6</code>).","An integer literal (<code>10</code>).","A string literal (<code>&#39;hello, world&#39;</code>).","A symbol literal (<code>#foo</code>).","A minus sign, the substraction operator (<code>-</code>)","A backward slash (<code>\\\\\\\\</code>).","A greater-than sign, the greater-than operator (<code>&gt;</code>).","A pound sign immediately followed by opening parenthesis (…","An opening square-bracket (<code>[</code>).","An opening parenthesis (<code>(</code>).","A tilde, the bitwise ‘not’ operator (<code>~</code>).","A sequence of operators (eg: <code>&gt;&gt;&gt;</code>).","A vertical bar, the binary ‘or’ operator (<code>|</code>).","A percentage sign, the modulo operator (<code>%</code>).","A period, the statement terminator (<code>.</code>).","A plus, the addition operator (‘+’).","A pound sign (<code>#</code>).","The primitive keyword (<code>primitive</code>).","The separator sequence (<code>-------</code>).","A star, the multiplication operator (<code>*</code>).","Represents a token from the lexer.","Some whitespace (<code> </code>).","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Construct a new lexer.","","Configure the lexer on whether to skip comments or not.","Configure the lexer on whether to skip whitespace or not.","Consume the lexer and return the left-over text.","","","","","","","",""],"i":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,1,1,1,1,1,2,1,2,1,2,1,2],"f":"``````````````````````````````````````{ce{}{}}000{bb}{dd}{{ce}f{}{}}0{{bb}h}{{dd}h}{{bj}l}{{dj}l}{cc{}}0888{cb{{A`{n}}}}{b{{Ab{c}}}{}}{{bh}b}0{bAd}<<{c{{Af{e}}}{}{}}000{cAh{}}0","c":[],"p":[[5,"Lexer",0],[6,"Token",0],[1,"unit"],[1,"bool"],[5,"Formatter",68],[8,"Result",68],[1,"str"],[10,"AsRef",69],[6,"Option",70],[5,"String",71],[6,"Result",72],[5,"TypeId",73]],"b":[]}],\
["som_parser_core",{"doc":"","t":"FFFFFKNNNNNNNNNNNNNCNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNGPPHHHHNNNNHHNHNNNHHHHHHHHHNNNN","n":["And","AndLeft","AndRight","Map","Or","Parser","and","and_left","and_right","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","combinators","from","from","from","from","from","into","into","into","into","into","map","or","parse","parse","parse","parse","parse","parse","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Either","Left","Right","all","alternative","any","between","borrow","borrow_mut","clone","clone_into","default","either","eq","fallback","fmt","from","into","many","map","not","optional","peek","sep_by","sep_by1","sequence","some","to_owned","try_from","try_into","type_id"],"q":[[0,"som_parser_core"],[53,"som_parser_core::combinators"],[84,"core::ops::function"],[85,"core::option"],[86,"core::clone"],[87,"core::result"],[88,"core::any"],[89,"alloc::vec"],[90,"core::default"],[91,"core::cmp"],[92,"core::fmt"],[93,"core::fmt"]],"d":["Sequences two parsers, one after the other, collecting …","Sequences two parsers, one after the other, but discards …","Sequences two parsers, one after the other, but discards …","Maps a function over the output value of the parser.","Tries to apply the first parser, if it fails, it tries to …","Defines a parser.","Sequences two parsers, one after the other, collecting …","Sequences two parsers, one after the other, but discards …","Sequences two parsers, one after the other, but discards …","","","","","","","","","","","Generic parser combinators.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maps a function over the output value of the parser.","Tries to apply the first parser, if it fails, it tries to …","Applies the parser on some input.","","","","","","","","","","","","","","","","","","","","","Represents a value of either type A (Left) or type B …","","","Applies every parser in a slice, from left to right, and …","Tries to apply the first parser, if it fails, it tries to …","Tries every parser in a slice, from left to right, and …","Parses something that is enclosed between two other things.","","","","","Tries to apply a parser, or fallback to its default value …","Same as <code>either</code>, but allows for different output types for …","","Tries to apply a parser, or fallback to a constant value …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Applies a parser zero or more times.","Transforms the output value of a parser.","Runs the given parser, fails if it succeeded, and succeeds …","Tries to apply a parser, but fails gracefully (with an …","Transforms a parser into a non-consuming one, allowing to …","Parses zero or more things, separated by an arbitrary …","Parses one or more things, separated by an arbitrary …","Sequences two parsers, one after the other, collecting …","Applies a parser one or more times.","","","",""],"i":[0,0,0,0,0,0,1,1,1,2,8,5,3,4,2,8,5,3,4,0,2,8,5,3,4,2,8,5,3,4,1,1,1,2,8,5,3,4,2,8,5,3,4,2,8,5,3,4,2,8,5,3,4,0,16,16,0,0,0,0,16,16,16,16,0,0,16,0,16,16,16,0,0,0,0,0,0,0,0,0,16,16,16,16],"f":"``````{{bg}{{d{bg}}}{}{}{{b{ce}}}}{{bg}{{f{bgc}}}{}{}{{b{ce}}}}{{bg}{{h{bgi}}}{}{}{{b{ce}}}{}}{ce{}{}}000000000`{cc{}}000011111{{bg}{{j{bgc}}}{}{}{{n{c}{{l{e}}}}}}{{bg}{{A`{bg}}}{}{}{{b{ce}}}}{{bc}{{Ad{{Ab{ec}}}}}{}{}}{{{d{gk}}e}{{Ad{{Ab{{Ab{ci}}e}}}}}{}{}{{b{ce}}}{}{{b{ie}}}}{{{A`{gi}}e}{{Ad{{Ab{ce}}}}}{}Af{{b{ce}}}{{b{ce}}}}{{{j{gkc}}e}{{Ad{{Ab{ie}}}}}{}{}{{b{ce}}}{}{{n{c}{{l{i}}}}}}{{{f{gki}}e}{{Ad{{Ab{ce}}}}}{}{}{{b{ce}}}{}{{b{ie}}}}{{{h{gkc}}e}{{Ad{{Ab{ie}}}}}{}{}{{b{ce}}}{}{{b{ie}}}}{c{{Ah{e}}}{}{}}000000000{cAj{}}0000```{{{Al{g}}}{{`{{b{{An{c}}e}}}}}{}{}{{b{ce}}}}{{gi}{{`{{b{ce}}}}}{}Af{{b{ce}}}{{b{ce}}}}{{{Al{g}}}{{`{{b{ce}}}}}{}Af{{b{ce}}}}{{gko}{{`{{b{ie}}}}}{}{}{{b{ce}}}{}{{b{ie}}}{}{{b{me}}}}??{{{B`{ce}}}{{B`{ce}}}AfAf}{{ce}Bb{}{}}{g{{`{{b{ce}}}}}BdAf{{b{ce}}}}{{gk}{{`{{b{{B`{ci}}e}}}}}{}Af{{b{ce}}}{}{{b{ie}}}}{{{B`{ce}}{B`{ce}}}BfBhBh}{{cg}{{`{{b{ce}}}}}AfAf{{b{ce}}}}{{{B`{ce}}Bj}BlBnBn}{cc{}}{ce{}{}}{g{{`{{b{{An{c}}e}}}}}{}Af{{b{ce}}}}{{gk}{{`{{b{ie}}}}}{}{}{{b{ce}}}{}{{n{c}{{l{i}}}}}}{g{{`{{b{Bbe}}}}}{}Af{{b{ce}}}}{g{{`{{b{{Ad{c}}e}}}}}{}Af{{b{ce}}}}{g{{`{{b{ce}}}}}{}Af{{b{ce}}}}{{gk}{{`{{b{{An{i}}e}}}}}{}Af{{b{ce}}}{}{{b{ie}}}}0{{gk}{{`{{b{{Ab{ci}}e}}}}}{}{}{{b{ce}}}{}{{b{ie}}}}67{c{{Ah{e}}}{}{}}0{cAj{}}","c":[],"p":[[10,"Parser",0],[5,"And",0],[5,"AndLeft",0],[5,"AndRight",0],[5,"Map",0],[17,"Output"],[10,"Fn",84],[5,"Or",0],[1,"tuple"],[6,"Option",85],[10,"Clone",86],[6,"Result",87],[5,"TypeId",88],[1,"slice"],[5,"Vec",89],[6,"Either",53],[1,"unit"],[10,"Default",90],[1,"bool"],[10,"PartialEq",91],[5,"Formatter",92],[8,"Result",92],[10,"Debug",92]],"b":[]}],\
["som_parser_symbols",{"doc":"This crate serves as the syntactical analyser (parser) for …","t":"HCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH","n":["apply","lang","parse_file","array","assignment","big_integer","binary_send","block","body","class_def","double","eof","exact","exact_ident","exit","expression","file","identifier","integer","keyword","literal","locals","method_body","method_def","operator","operator_method_def","operator_sequence","parameter","parameters","positional_method_def","positional_send","primary","primitive","single_operator","statement","string","symbol","term","unary_method_def","unary_send"],"q":[[0,"som_parser_symbols"],[3,"som_parser_symbols::lang"],[40,"som_lexer::token"],[41,"core::option"],[42,"som_parser_core"],[43,"som_core::ast"],[44,"som_core::ast"],[45,"som_core::ast"],[46,"som_core::ast"]],"d":["Applies a parser and returns the output value if the …","SOM-specific parser combinators.","Parses the input of an entire file into an AST.","","","","","","","","","A parser that expects to be nothing left in its input.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"{{e{d{b}}}{{f{c}}}{}{{h{c{d{b}}}}}}`{{{d{b}}}{{f{j}}}}{{}{{`{{h{{n{l}}{d{b}}}}}}}}{{}{{`{{h{A`{d{b}}}}}}}}{{}{{`{{h{Ab{d{b}}}}}}}}11{{}{{`{{h{Ad{d{b}}}}}}}}{{}{{`{{h{j{d{b}}}}}}}}{{}{{`{{h{Af{d{b}}}}}}}}{{}{{`{{h{Ah{d{b}}}}}}}}{b{{`{{h{Ah{d{b}}}}}}}}{Aj{{`{{h{Ah{d{b}}}}}}}}7746{{}{{`{{h{Al{d{b}}}}}}}}7{{}{{`{{h{l{d{b}}}}}}}}{{}{{`{{h{{n{Ab}}{d{b}}}}}}}}{{}{{`{{h{An{d{b}}}}}}}}{{}{{`{{h{B`{d{b}}}}}}}};0;;20<<1{{}{{`{{h{Aj{d{b}}}}}}}}=<<=1=","c":[],"p":[[6,"Token",40],[1,"slice"],[6,"Option",41],[10,"Parser",42],[5,"ClassDef",43],[6,"Literal",43],[5,"Vec",44],[6,"Expression",43],[5,"String",45],[5,"Body",43],[1,"f64"],[1,"unit"],[1,"str"],[1,"i64"],[6,"MethodBody",43],[5,"MethodDef",43]],"b":[]}],\
["som_parser_text",{"doc":"This crate serves as the syntactical analyser (parser) for …","t":"HCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH","n":["apply","lang","parse_file","array","assignment","binary_send","block","body","class_def","comment","digit","digitc","double","eof","exact","exact_str","exit","expression","file","identifier","integer","keyword","literal","locals","lower","method_body","method_def","not_exact","one_of","operator","operator_method_def","positional_method_def","positional_send","primary","primitive","separator","single_operator","spacing","statement","string","symbol","term","unary_method_def","unary_send","upper","whitespace"],"q":[[0,"som_parser_text"],[3,"som_parser_text::lang"],[46,"core::option"],[47,"som_parser_core"],[48,"som_core::ast"],[49,"som_core::ast"],[50,"som_core::ast"],[51,"som_core::ast"]],"d":["Applies a parser and returns the output value if the …","SOM-specific parser combinators.","Parses the input of an entire file into an AST.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"{{e{d{b}}}{{f{c}}}{}{{h{c{d{b}}}}}}`{{{d{b}}}{{f{j}}}}{{}{{`{{h{{n{l}}{d{b}}}}}}}}{{}{{`{{h{A`{d{b}}}}}}}}00{{}{{`{{h{Ab{d{b}}}}}}}}{{}{{`{{h{j{d{b}}}}}}}}{{}{{`{{h{Ad{d{b}}}}}}}}{{}{{`{{h{Af{d{b}}}}}}}}{{}{{`{{h{b{d{b}}}}}}}}{{}{{`{{h{Ah{d{b}}}}}}}}{{}{{`{{h{Aj{d{b}}}}}}}}{b{{`{{h{b{d{b}}}}}}}}{Al{{`{{h{Aj{d{b}}}}}}}}997656{{}{{`{{h{l{d{b}}}}}}}}{{}{{`{{h{{n{Ad}}{d{b}}}}}}}}6{{}{{`{{h{An{d{b}}}}}}}}{{}{{`{{h{B`{d{b}}}}}}}}5{Al{{`{{h{b{d{b}}}}}}}};11>>2797>;;>1>99","c":[],"p":[[1,"char"],[1,"slice"],[6,"Option",46],[10,"Parser",47],[5,"ClassDef",48],[6,"Literal",48],[5,"Vec",49],[6,"Expression",48],[5,"Body",48],[5,"String",50],[1,"i64"],[1,"f64"],[1,"unit"],[1,"str"],[6,"MethodBody",48],[5,"MethodDef",48]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
